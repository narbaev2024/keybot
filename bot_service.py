import telebot
from datetime import datetime
import psycopg2
from apscheduler.schedulers.background import BackgroundScheduler
import pytz
import logging
from telebot import types

logging.basicConfig(level=logging.INFO)

timezone = pytz.timezone('Asia/Bishkek')

API_TOKEN = '7370432818:AAELlwGFnwnq0J7flE1gZsDhyG3wnJRuaCY'
bot = telebot.TeleBot(API_TOKEN)

user_states = {}

try:
    conn = psycopg2.connect(
        dbname='keybot',
        user='postgres',
        password='adminadmin',
        host='localhost',
        port='5432'
    )
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS certificates (
            id SERIAL PRIMARY KEY,
            user_id BIGINT,
            user_name TEXT,
            certificate_name TEXT,
            certificate_key TEXT,
            expiration_date DATE
        );
    ''')
    conn.commit()
    logging.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã.")
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    exit()


@bot.message_handler(commands=['start'])
def start_command(message):
    show_menu(message)


def show_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_add = types.KeyboardButton("/add")
    button_remove = types.KeyboardButton("/remove")
    button_check = types.KeyboardButton("/certificate")
    button_help = types.KeyboardButton("/help")

    markup.add(button_add, button_remove, button_check, button_help)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=markup)


@bot.message_handler(commands=['add'])
def start_add_certificate(message):
    user_states[message.from_user.id] = {'step': 1}
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö:", reply_markup=cancel_keyboard())


def cancel_keyboard():
    markup = types.InlineKeyboardMarkup()
    button_cancel = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")
    markup.add(button_cancel)
    return markup


@bot.callback_query_handler(func=lambda call: call.data == "cancel")
def cancel_command(call):
    user_id = call.from_user.id
    if user_id in user_states:
        del user_states[user_id]
        bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –æ—Ç–º–µ–Ω—ë–Ω.")
        bot.send_message(user_id, "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã.")
    else:
        bot.answer_callback_query(call.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.")


@bot.message_handler(func=lambda message: message.from_user.id in user_states)
def handle_add_certificate_input(message):
    user_id = message.from_user.id
    step = user_states[user_id]['step']

    if step == 1:
        if message.text.startswith('"') and message.text.endswith('"'):
            user_states[user_id]['certificate_name'] = message.text.strip('"')
            user_states[user_id]['step'] = 2
            bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö:", reply_markup=cancel_keyboard())
        else:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö.", reply_markup=cancel_keyboard())
    elif step == 2:
        if message.text.startswith('"') and message.text.endswith('"'):
            user_states[user_id]['certificate_key'] = message.text.strip('"')
            user_states[user_id]['step'] = 3
            bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:", reply_markup=cancel_keyboard())
        else:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö.", reply_markup=cancel_keyboard())
    elif step == 3:
        try:
            expiration_date = datetime.strptime(message.text, '%Y-%m-%d').date()
            cursor.execute(
                "INSERT INTO certificates (user_id, user_name, certificate_name, certificate_key, expiration_date) VALUES (%s, %s, %s, %s, %s)",
                (user_id, message.from_user.full_name, user_states[user_id]['certificate_name'],
                 user_states[user_id]['certificate_key'], expiration_date)
            )
            conn.commit()
            bot.reply_to(message,
                         f"‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç *'{user_states[user_id]['certificate_name']}'* —Å –∫–ª—é—á–æ–º *'{user_states[user_id]['certificate_key']}'* –¥–æ–±–∞–≤–ª–µ–Ω —Å –¥–∞—Ç–æ–π –∏—Å—Ç–µ—á–µ–Ω–∏—è {message.text}.")
            logging.info(
                f"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç '{user_states[user_id]['certificate_name']}' —Å –∫–ª—é—á–æ–º '{user_states[user_id]['certificate_key']}' –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name}.")
        except ValueError:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD.", reply_markup=cancel_keyboard())
        finally:
            del user_states[user_id]
    else:
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@bot.message_handler(commands=['remove'])
def remove_certificate(message):
    if message.from_user.id in user_states:
        bot.reply_to(message, "‚ùó –í—ã –≤—Å—ë –µ—â–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã.", reply_markup=cancel_keyboard())
        return

    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name}: {message.text}")
    
    try:
        if '"' in message.text:
            name = message.text.split('"')[1]  
        else:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove \"–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞\"", reply_markup=cancel_keyboard())
            return

        cursor.execute("DELETE FROM certificates WHERE user_id = %s AND certificate_name = %s", 
                       (message.from_user.id, name))
        conn.commit()

        if cursor.rowcount > 0:
            bot.reply_to(message, f"‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç *'{name}'* —É–¥–∞–ª—ë–Ω.", parse_mode='Markdown')
            logging.info(f"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç '{name}' —É–¥–∞–ª—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name}.")
        else:
            bot.reply_to(message, f"üö´ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç *'{name}'* –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode='Markdown')
            logging.info(f"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name}.")
    
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", reply_markup=cancel_keyboard())
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")



@bot.message_handler(commands=['certificate'])
def check_certificates(message):
    if message.from_user.id in user_states:
        bot.reply_to(message, "‚ùó –í—ã –≤—Å—ë –µ—â–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã.", reply_markup=cancel_keyboard())
        return

    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name}: {message.text}")
    try:
        cursor.execute("SELECT certificate_name, certificate_key, expiration_date FROM certificates WHERE user_id = %s",
                       (message.from_user.id,))
        rows = cursor.fetchall()

        if rows:
            response = "*–í–∞—à–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:*\n"
            for name, certificate_key, expiration_date in rows:
                expiration_date_str = expiration_date.strftime('%d-%m-%Y')
                response += f"üîñ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: *\"{name}\"*\n" \
                            f"üîë –ö–ª—é—á: \"{certificate_key}\"\n" \
                            f"üìÖ –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {expiration_date_str}\n\n"
        else:
            response = "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤."

        bot.reply_to(message, response, parse_mode='Markdown')
        logging.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.full_name}.")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {e}")


@bot.message_handler(commands=['help'])
def help_command(message):
    if message.from_user.id in user_states:
        bot.reply_to(message, "‚ùó –í—ã –≤—Å—ë –µ—â–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã.", reply_markup=cancel_keyboard())
        return

    bot.reply_to(message, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                          "/add - –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç\n"
                          "/remove - –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç\n"
                          "/certificate - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã\n"
                          "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é",
                  parse_mode='Markdown')


def send_reminders():
    try:
        today = datetime.now(timezone).date()
        now = datetime.now(timezone)
        cursor.execute("SELECT user_id, user_name, certificate_name, expiration_date FROM certificates")
        rows = cursor.fetchall()
        for user_id, user_name, name, expiration_date in rows:
            expiration_date = expiration_date.date() if isinstance(expiration_date, datetime) else expiration_date

            days_left = (expiration_date - today).days
            hours_left = (expiration_date - now).total_seconds() // 3600

            if days_left == 7 or days_left == 3 or (days_left == 0 and hours_left <= 5):
                bot.send_message(user_id,
                                 f"{user_name}, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç *'{name}'* –∏—Å—Ç–µ–∫–∞–µ—Ç {expiration_date}. –û—Å—Ç–∞–ª–æ—Å—å {days_left} {'–¥–µ–Ω—å' if days_left == 1 else '–¥–Ω—è' if days_left < 5 else '–¥–Ω–µ–π'} –∏ {int(hours_left % 24)} {'—á–∞—Å' if hours_left % 24 == 1 else '—á–∞—Å–∞' if hours_left % 24 < 5 else '—á–∞—Å–æ–≤'}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –µ–≥–æ!",
                                 parse_mode='Markdown')
                logging.info(
                    f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ '{name}' –∑–∞ {days_left} {'–¥–µ–Ω—å' if days_left == 1 else '–¥–Ω—è' if days_left < 5 else '–¥–Ω–µ–π'} –∏ {int(hours_left % 24)} {'—á–∞—Å' if hours_left % 24 == 1 else '—á–∞—Å–∞' if hours_left % 24 < 5 else '—á–∞—Å–æ–≤'}.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")


scheduler = BackgroundScheduler(timezone=timezone)
scheduler.add_job(send_reminders, 'interval', days=1)
scheduler.start()

try:
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã...")
    bot.polling(none_stop=True)
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
